---
export interface Props {
  src: string;
  alt?: string;
  width?: number;
  height?: number;
  quality?: number;
  class?: string;
  sizes?: string;
  loading?: 'eager' | 'lazy';
  decoding?: 'auto' | 'sync' | 'async';
  fetchpriority?: 'high' | 'low' | 'auto';
}

const props = Astro.props as Props;
const {
  src,
  alt = '',
  width = 1200,
  height = 800,
  quality = 75,
  class: className = '',
  sizes = '100vw',
  loading = 'lazy',
  decoding = 'async',
  fetchpriority = 'auto',
} = props;

// Build an absolute source URL in production so Vercel's optimizer can always fetch it
let optimizedURL = src;
if (import.meta.env.MODE === 'production') {
  const isAbsolute = /^https?:\/\//.test(src);
  const isSameOriginPath = src.startsWith('/') || src.startsWith('_astro');
  // For local static assets (/_astro/* or /images/*), avoid optimizer to prevent 404s
  if (!isSameOriginPath && isAbsolute) {
    const site = typeof Astro !== 'undefined' && Astro.site ? String(Astro.site) : '';
    const absoluteSrc = src.startsWith('http') ? src : `${site.replace(/\/$/, '')}${src}`;
    optimizedURL = `/_vercel/image?url=${encodeURIComponent(absoluteSrc)}&w=${width}&q=${quality}`;
  }
}

const isDecorative = (alt || '').trim() === '';
---

<img
  src={optimizedURL}
  alt={alt}
  width={width}
  height={height}
  class={className}
  sizes={sizes}
  loading={loading}
  decoding={decoding}
  fetchpriority={fetchpriority}
  aria-hidden={isDecorative ? 'true' : undefined}
  role={isDecorative ? 'presentation' : undefined}
/> 
