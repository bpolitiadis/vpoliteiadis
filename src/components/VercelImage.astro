---
export interface Props {
  src: string;
  alt?: string;
  width?: number;
  height?: number;
  quality?: number;
  class?: string;
  sizes?: string;
  loading?: 'eager' | 'lazy';
  decoding?: 'auto' | 'sync' | 'async';
  fetchpriority?: 'high' | 'low' | 'auto';
  format?: 'auto' | 'webp' | 'avif' | 'png' | 'jpg';
  placeholder?: 'blur' | 'dominantColor' | 'none';
  blurDataURL?: string;
}

const props = Astro.props as Props;
const {
  src,
  alt = '',
  width = 1200,
  height = 800,
  quality = 80,
  class: className = '',
  sizes = '100vw',
  loading = 'lazy',
  decoding = 'async',
  fetchpriority = 'auto',
  format = 'auto',
  placeholder = 'none',
  blurDataURL = '',
} = props;

// 2025 Best Practice: Use Vercel's Image Optimization API for all images
// This eliminates build-time processing and provides instant optimization
let optimizedURL = src;

// For production, use Vercel's Image Optimization API
if (import.meta.env.MODE === 'production') {
  const isAbsolute = /^https?:\/\//.test(src);
  const site = typeof Astro !== 'undefined' && Astro.site ? String(Astro.site) : '';
  
  // Build absolute URL for Vercel's optimizer
  const absoluteSrc = isAbsolute ? src : `${site.replace(/\/$/, '')}${src}`;
  
  // Use Vercel's Image Optimization API
  const params = new URLSearchParams({
    url: absoluteSrc,
    w: width.toString(),
    q: quality.toString(),
    f: format === 'auto' ? 'auto' : format,
  });
  
  // Add placeholder support for better UX
  if (placeholder !== 'none') {
    params.append('placeholder', placeholder);
  }
  
  optimizedURL = `/_vercel/image?${params.toString()}`;
} else {
  // For development, use the src directly
  optimizedURL = src;
}

const isDecorative = (alt || '').trim() === '';

// 2025 Best Practices: Enhanced responsive image attributes
const responsiveAttributes: Record<string, string> = {
  // Modern responsive image attributes
  'data-loading': loading,
  'data-decoding': decoding,
  'data-fetchpriority': fetchpriority,
  // Performance optimizations
  'data-format': format,
  'data-placeholder': placeholder,
};

// Add blur data URL if provided for better loading experience
if (blurDataURL) {
  responsiveAttributes['data-blur'] = blurDataURL;
}
---

<img
  src={optimizedURL}
  alt={alt}
  width={width}
  height={height}
  class={className}
  sizes={sizes}
  loading={loading}
  decoding={decoding}
  fetchpriority={fetchpriority}
  aria-hidden={isDecorative ? 'true' : undefined}
  role={isDecorative ? 'presentation' : undefined}
  {...responsiveAttributes}
/> 
