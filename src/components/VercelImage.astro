---
export interface Props {
  src: string;
  alt?: string;
  width?: number;
  height?: number;
  class?: string;
  sizes?: string;
  loading?: 'eager' | 'lazy';
  decoding?: 'auto' | 'sync' | 'async';
  fetchpriority?: 'high' | 'low' | 'auto';
  quality?: number;
  /** Whether this image should be treated as decorative */
  decorative?: boolean;
}

const {
  src,
  alt = '',
  width = 1200,
  height = 800,
  class: className = '',
  sizes = '100vw',
  loading = 'lazy',
  decoding = 'async',
  fetchpriority = 'auto',
  quality = 80,
  decorative = false,
} = Astro.props;

// 2025 Best Practice: Use pre-optimized images with responsive srcset
// This approach provides better performance than runtime optimization
let optimizedSrc = src;
let srcset = '';
let srcsetAvif = '';

// Extract base name and extension from src
const pathParts = src.split('/');
const filename = pathParts[pathParts.length - 1];
const baseName = filename.split('.')[0];
const extension = filename.split('.').pop() || 'webp';

// Generate responsive srcset for WebP and AVIF formats
const breakpoints = [480, 800, 1200, 1600, 2400];
const webpSources: string[] = [];
const avifSources: string[] = [];

breakpoints.forEach((bp) => {
  const webpPath = src.replace(filename, `${baseName}-${bp}w.webp`);
  const avifPath = src.replace(filename, `${baseName}-${bp}w.avif`);
  
  webpSources.push(`${webpPath} ${bp}w`);
  avifSources.push(`${avifPath} ${bp}w`);
});

srcset = webpSources.join(', ');
srcsetAvif = avifSources.join(', ');

// Use the base optimized image as fallback
optimizedSrc = src.replace(filename, `${baseName}.webp`);

const isDecorative = decorative || (alt || '').trim() === '';
---

<picture>
  <!-- AVIF sources for modern browsers -->
  <source srcset={srcsetAvif} sizes={sizes} type="image/avif" />
  
  <!-- WebP sources for broader support -->
  <source srcset={srcset} sizes={sizes} type="image/webp" />
  
  <!-- Fallback image -->
  <img
    src={optimizedSrc}
    alt={alt}
    width={width}
    height={height}
    class={className}
    sizes={sizes}
    loading={loading}
    decoding={decoding}
    fetchpriority={fetchpriority}
    aria-hidden={isDecorative ? 'true' : undefined}
    role={isDecorative ? 'presentation' : undefined}
  />
</picture> 
