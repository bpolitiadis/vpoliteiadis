---
export interface Props {
  profile: {
    platform: string;
    username: string;
    displayName: string;
    deepLink: string;
    webUrl: string;
    icon: string;
    ariaLabel: string;
  };
  className?: string;
  size?: 'sm' | 'md' | 'lg';
}

const { profile, className = '', size = 'md' } = Astro.props;

// Size classes mapping
const sizeClasses = {
  sm: 'w-4 h-4',
  md: 'w-4 h-4',
  lg: 'w-5 h-5'
};

const iconSize = sizeClasses[size];
---

<a
  href={profile.webUrl}
  aria-label={profile.ariaLabel}
  target="_blank"
  rel="noopener noreferrer"
  class={`social-link group relative ${className}`}
  data-platform={profile.platform}
  data-deep-link={profile.deepLink}
  data-web-url={profile.webUrl}
>
  <!-- Icon with neon hover glow -->
  <div class="text-muted-foreground hover:text-primary transition-all duration-200 p-2 rounded-md hover:bg-primary/10 group relative">
    {profile.icon === 'github' && (
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class={iconSize}>
        <path fill-rule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.014c0 4.424 2.865 8.178 6.839 9.504.5.092.682-.218.682-.483 0-.237-.009-.868-.014-1.704-2.782.605-3.369-1.342-3.369-1.342-.455-1.158-1.11-1.468-1.11-1.468-.908-.62.069-.607.069-.607 1.003.07 1.53 1.03 1.53 1.03.892 1.53 2.341 1.088 2.91.833.091-.647.35-1.089.636-1.339-2.221-.253-4.555-1.113-4.555-4.952 0-1.094.39-1.99 1.03-2.69-.103-.253-.447-1.272.098-2.65 0 0 .84-.27 2.75 1.027A9.564 9.564 0 0 1 12 6.844c.85.004 1.705.115 2.504.337 1.909-1.297 2.748-1.027 2.748-1.027.546 1.378.202 2.397.099 2.65.64.701 1.028 1.597 1.028 2.69 0 3.848-2.337 4.696-4.565 4.944.36.31.68.92.68 1.855 0 1.338-.012 2.418-.012 2.748 0 .268.18.58.688.481A10.019 10.019 0 0 0 22 12.014C22 6.484 17.523 2 12 2Z" clip-rule="evenodd" />
      </svg>
    )}
    {profile.icon === 'linkedin' && (
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class={iconSize}>
        <path d="M20.451 20.451h-3.554v-5.569c0-1.329-.024-3.039-1.852-3.039-1.853 0-2.136 1.447-2.136 2.944v5.664H9.355V9h3.414v1.561h.048c.476-.9 1.637-1.85 3.37-1.85 3.602 0 4.268 2.37 4.268 5.455v6.285zM5.337 7.433a2.063 2.063 0 1 1 0-4.127 2.063 2.063 0 0 1 0 4.127zM7.114 20.451H3.558V9h3.556v11.451z"/>
      </svg>
    )}
    {profile.icon === 'instagram' && (
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class={iconSize}>
        <path d="M7 2h10a5 5 0 0 1 5 5v10a5 5 0 0 1-5 5H7a5 5 0 0 1-5-5V7a5 5 0 0 1 5-5Zm0 2a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V7a3 3 0 0 0-3-3H7Zm5 3.5a5.5 5.5 0 1 1 0 11a5.5 5.5 0 0 1 0-11Zm0 2a3.5 3.5 0 1 0 0 7a3.5 3.5 0 0 0 0-7Zm5.75-.75a.75.75 0 1 1 0 1.5a.75.75 0 0 1 0-1.5Z"/>
      </svg>
    )}
    
    <!-- Neon glow on hover -->
    <div class="absolute inset-0 rounded-md bg-primary opacity-0 group-hover:opacity-20 blur-sm transition-opacity duration-200"></div>
  </div>
</a>

<script>
  // Deep-linking logic for social media platforms
  class SocialLinkHandler {
    private static instance: SocialLinkHandler;
    private isMobile: boolean;
    private analytics: any;

    private constructor() {
      this.isMobile = this.detectMobile();
      this.analytics = this.getAnalytics();
    }

    static getInstance(): SocialLinkHandler {
      if (!SocialLinkHandler.instance) {
        SocialLinkHandler.instance = new SocialLinkHandler();
      }
      return SocialLinkHandler.instance;
    }

    private detectMobile(): boolean {
      return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }

    private getAnalytics(): any {
      // Try to get analytics from global scope
      if (typeof window !== 'undefined') {
        return (window as any).analytics || null;
      }
      return null;
    }

    async handleSocialClick(event: Event, platform: string, deepLink: string, webUrl: string): Promise<void> {
      event.preventDefault();
      
      try {
        if (this.isMobile && this.shouldTryDeepLink(platform)) {
          // Try deep link first
          const deepLinkSuccess = await this.attemptDeepLink(deepLink);
          
          if (deepLinkSuccess) {
            this.trackAnalytics(platform, 'deep-link');
            return;
          }
        }
        
        // Fallback to web URL
        this.trackAnalytics(platform, 'web-fallback');
        window.open(webUrl, '_blank', 'noopener,noreferrer');
        
      } catch (error) {
        console.warn(`Failed to handle social link for ${platform}:`, error);
        // Always fallback to web URL on error
        this.trackAnalytics(platform, 'web-fallback');
        window.open(webUrl, '_blank', 'noopener,noreferrer');
      }
    }

    private shouldTryDeepLink(platform: string): boolean {
      // Only try deep links for platforms that support them
      return ['instagram', 'linkedin'].includes(platform);
    }

    private async attemptDeepLink(deepLink: string): Promise<boolean> {
      return new Promise((resolve) => {
        // Create a hidden iframe to test deep link
        const iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        iframe.src = deepLink;
        
        let timeoutId: NodeJS.Timeout;
        let hasNavigated = false;
        
        // Set a timeout to detect if deep link failed
        timeoutId = setTimeout(() => {
          if (!hasNavigated) {
            resolve(false);
          }
        }, 1000);
        
        // Listen for page visibility change (indicates app opened)
        const handleVisibilityChange = () => {
          if (document.hidden) {
            hasNavigated = true;
            clearTimeout(timeoutId);
            resolve(true);
            document.removeEventListener('visibilitychange', handleVisibilityChange);
          }
        };
        
        document.addEventListener('visibilitychange', handleVisibilityChange);
        
        // Clean up iframe
        setTimeout(() => {
          document.body.removeChild(iframe);
          clearTimeout(timeoutId);
          if (!hasNavigated) {
            resolve(false);
          }
        }, 1000);
        
        document.body.appendChild(iframe);
      });
    }

    private trackAnalytics(platform: string, route: 'deep-link' | 'web-fallback'): void {
      if (this.analytics && typeof this.analytics.trackSocialClick === 'function') {
        this.analytics.trackSocialClick(platform, route);
      }
      
      // Also try to send to Vercel Analytics if available
      if (typeof window !== 'undefined' && (window as any).va) {
        (window as any).va.track('social_click', {
          platform,
          route
        });
      }
    }
  }

  // Initialize social link handler
  const socialHandler = SocialLinkHandler.getInstance();

  // Add click handlers to all social links
  document.addEventListener('DOMContentLoaded', () => {
    const socialLinks = document.querySelectorAll('.social-link');
    
    socialLinks.forEach(link => {
      link.addEventListener('click', (event) => {
        const target = event.currentTarget as HTMLElement;
        const platform = target.getAttribute('data-platform');
        const deepLink = target.getAttribute('data-deep-link');
        const webUrl = target.getAttribute('data-web-url');
        
        if (platform && deepLink && webUrl) {
          socialHandler.handleSocialClick(event, platform, deepLink, webUrl);
        }
      });
    });
  });
</script>
