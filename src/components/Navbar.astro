---
// Navbar component with cyberpunk styling and theme toggle
export interface Props {
  currentPath?: string;
}

const { currentPath = '/' } = Astro.props;

// Navigation items with proper routing
const navItems = [
  { href: '/', label: 'Home', icon: '🏠' },
  { href: '/about', label: 'About', icon: '👤' },
  { href: '/projects', label: 'Projects', icon: '💻' },
  { href: '/creative', label: 'Creative', icon: '🎨' },
  { href: '/blog', label: 'Blog', icon: '📝' },
  { href: '/contact', label: 'Contact', icon: '📧' },
];
---

<nav class="sticky top-0 z-50 w-full bg-background/95 backdrop-blur-md border-b border-border transition-all duration-300" role="navigation" aria-label="Main navigation">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      
      <!-- VP Logo -->
      <div class="flex-shrink-0">
        <a href="/" class="flex items-center space-x-2 group" aria-label="Vasileios Politeiadis - Home">
          <!-- VP Logo SVG Placeholder -->
          <div class="w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center font-orbitron font-bold text-primary-foreground text-lg group-hover:animate-glow transition-all duration-300" role="img" aria-label="VP Logo">
            VP
          </div>
          <span class="font-orbitron font-bold text-primary text-xl hidden sm:block group-hover:text-primary/80 transition-all duration-300">
            Vasileios
          </span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-8" role="menubar">
          {navItems.map((item) => (
            <a
              href={item.href}
              class={`px-3 py-2 rounded-md text-sm font-medium transition-all duration-300 relative group font-orbitron ${
                currentPath === item.href
                  ? 'text-primary bg-primary/10 border border-primary/30'
                  : 'text-foreground hover:text-primary hover:bg-primary/5'
              }`}
              role="menuitem"
              aria-current={currentPath === item.href ? 'page' : undefined}
            >
              <span class="mr-2" aria-hidden="true">{item.icon}</span>
              {item.label}
              {/* Hover glow effect */}
              <div class="absolute inset-0 rounded-md bg-primary/0 group-hover:bg-primary/5 transition-all duration-300" aria-hidden="true"></div>
            </a>
          ))}
        </div>
      </div>

      <!-- Right side: Theme Toggle + Mobile Menu Button -->
      <div class="flex items-center space-x-4">
        
        <!-- Theme Toggle Button -->
        <button
          id="theme-toggle"
          class="p-2 rounded-lg bg-muted border border-border text-primary hover:bg-primary/10 hover:border-primary/40 transition-all duration-300 group"
          aria-label="Toggle between dark and light theme"
          aria-pressed="false"
        >
          <!-- Sun icon for light mode -->
          <svg id="theme-toggle-light-icon" class="w-5 h-5 hidden" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
            <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"/>
          </svg>
          <!-- Moon icon for dark mode -->
          <svg id="theme-toggle-dark-icon" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"/>
          </svg>
        </button>

        <!-- Mobile menu button -->
        <button
          id="mobile-menu-button"
          class="md:hidden p-2 rounded-lg bg-muted border border-border text-primary hover:bg-primary/10 transition-all duration-300"
          aria-label="Toggle mobile navigation menu"
          aria-expanded="false"
          aria-controls="mobile-menu"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation Menu -->
    <div id="mobile-menu" class="hidden md:hidden absolute top-full left-0 right-0 bg-background/95 backdrop-blur-md border-b border-border z-50" role="menu" aria-labelledby="mobile-menu-button">
      <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
        {navItems.map((item) => (
          <a
            href={item.href}
            class={`block px-3 py-2 rounded-md text-base font-medium transition-all duration-300 font-orbitron ${
              currentPath === item.href
                ? 'text-primary bg-primary/10 border border-primary/30'
                : 'text-foreground hover:text-primary hover:bg-primary/5'
            }`}
            role="menuitem"
            aria-current={currentPath === item.href ? 'page' : undefined}
          >
            <span class="mr-2" aria-hidden="true">{item.icon}</span>
            {item.label}
          </a>
        ))}
      </div>
    </div>
  </div>
</nav>

<script>
  // Theme toggle functionality
  function initTheme() {
    const themeToggle = document.getElementById('theme-toggle');
    const lightIcon = document.getElementById('theme-toggle-light-icon');
    const darkIcon = document.getElementById('theme-toggle-dark-icon');
    
    // Check for saved theme preference or default to dark
    const savedTheme = localStorage.getItem('theme') || 'dark';
    document.documentElement.classList.toggle('dark', savedTheme === 'dark');
    
    // Update icon visibility and aria-pressed
    if (savedTheme === 'dark') {
      lightIcon?.classList.remove('hidden');
      darkIcon?.classList.add('hidden');
      themeToggle?.setAttribute('aria-pressed', 'true');
    } else {
      lightIcon?.classList.add('hidden');
      darkIcon?.classList.remove('hidden');
      themeToggle?.setAttribute('aria-pressed', 'false');
    }
    
    // Theme toggle click handler
    themeToggle?.addEventListener('click', () => {
      const isDark = document.documentElement.classList.contains('dark');
      const newTheme = isDark ? 'light' : 'dark';
      
      // Toggle classes
      document.documentElement.classList.toggle('dark');
      
      // Save preference
      localStorage.setItem('theme', newTheme);
      
      // Update icons and aria-pressed
      if (newTheme === 'dark') {
        lightIcon?.classList.remove('hidden');
        darkIcon?.classList.add('hidden');
        themeToggle?.setAttribute('aria-pressed', 'true');
      } else {
        lightIcon?.classList.add('hidden');
        darkIcon?.classList.remove('hidden');
        themeToggle?.setAttribute('aria-pressed', 'false');
      }
    });
  }
  
  // Mobile menu functionality
  function initMobileMenu() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    // Ensure mobile menu is hidden by default
    if (mobileMenu) {
      mobileMenu.classList.add('hidden');
    }
    
    mobileMenuButton?.addEventListener('click', () => {
      const isExpanded = mobileMenu?.classList.contains('hidden') === false;
      mobileMenu?.classList.toggle('hidden');
      mobileMenuButton?.setAttribute('aria-expanded', (!isExpanded).toString());
    });
    
    // Close mobile menu when clicking on a link
    const mobileLinks = mobileMenu?.querySelectorAll('a');
    mobileLinks?.forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu?.classList.add('hidden');
        mobileMenuButton?.setAttribute('aria-expanded', 'false');
      });
    });

    // Close mobile menu when pressing Escape
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && mobileMenu && !mobileMenu.classList.contains('hidden')) {
        mobileMenu.classList.add('hidden');
        mobileMenuButton?.setAttribute('aria-expanded', 'false');
        mobileMenuButton?.focus();
      }
    });
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    initTheme();
    initMobileMenu();
  });
</script> 